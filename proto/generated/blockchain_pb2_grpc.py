# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import blockchain_pb2 as blockchain__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in blockchain_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NodeRegistryStub(object):
    """Service definition for DNS seed node
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterNode = channel.unary_unary(
                '/blockchain.NodeRegistry/RegisterNode',
                request_serializer=blockchain__pb2.Registration.SerializeToString,
                response_deserializer=blockchain__pb2.NodeList.FromString,
                _registered_method=True)


class NodeRegistryServicer(object):
    """Service definition for DNS seed node
    """

    def RegisterNode(self, request, context):
        """Register a new node with the network
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeRegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterNode': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterNode,
                    request_deserializer=blockchain__pb2.Registration.FromString,
                    response_serializer=blockchain__pb2.NodeList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'blockchain.NodeRegistry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('blockchain.NodeRegistry', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeRegistry(object):
    """Service definition for DNS seed node
    """

    @staticmethod
    def RegisterNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.NodeRegistry/RegisterNode',
            blockchain__pb2.Registration.SerializeToString,
            blockchain__pb2.NodeList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class FullNodeServiceStub(object):
    """Service definition for Full Node
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Handshake = channel.unary_unary(
                '/blockchain.FullNodeService/Handshake',
                request_serializer=blockchain__pb2.HandshakeRequest.SerializeToString,
                response_deserializer=blockchain__pb2.NodeList.FromString,
                _registered_method=True)
        self.NewTransactionBroadcast = channel.unary_unary(
                '/blockchain.FullNodeService/NewTransactionBroadcast',
                request_serializer=blockchain__pb2.NewTransaction.SerializeToString,
                response_deserializer=blockchain__pb2.BroadcastResponse.FromString,
                _registered_method=True)
        self.NewBlockBroadcast = channel.unary_unary(
                '/blockchain.FullNodeService/NewBlockBroadcast',
                request_serializer=blockchain__pb2.NewBlock.SerializeToString,
                response_deserializer=blockchain__pb2.BroadcastResponse.FromString,
                _registered_method=True)


class FullNodeServiceServicer(object):
    """Service definition for Full Node
    """

    def Handshake(self, request, context):
        """Handshake between nodes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewTransactionBroadcast(self, request, context):
        """Broadcast new transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewBlockBroadcast(self, request, context):
        """Broadcast new block
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FullNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Handshake': grpc.unary_unary_rpc_method_handler(
                    servicer.Handshake,
                    request_deserializer=blockchain__pb2.HandshakeRequest.FromString,
                    response_serializer=blockchain__pb2.NodeList.SerializeToString,
            ),
            'NewTransactionBroadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.NewTransactionBroadcast,
                    request_deserializer=blockchain__pb2.NewTransaction.FromString,
                    response_serializer=blockchain__pb2.BroadcastResponse.SerializeToString,
            ),
            'NewBlockBroadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.NewBlockBroadcast,
                    request_deserializer=blockchain__pb2.NewBlock.FromString,
                    response_serializer=blockchain__pb2.BroadcastResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'blockchain.FullNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('blockchain.FullNodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FullNodeService(object):
    """Service definition for Full Node
    """

    @staticmethod
    def Handshake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.FullNodeService/Handshake',
            blockchain__pb2.HandshakeRequest.SerializeToString,
            blockchain__pb2.NodeList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NewTransactionBroadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.FullNodeService/NewTransactionBroadcast',
            blockchain__pb2.NewTransaction.SerializeToString,
            blockchain__pb2.BroadcastResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NewBlockBroadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.FullNodeService/NewBlockBroadcast',
            blockchain__pb2.NewBlock.SerializeToString,
            blockchain__pb2.BroadcastResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
